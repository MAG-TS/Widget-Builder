[{"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\index.js":"1","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\reportWebVitals.js":"2","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\App.js":"3","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\dashboard\\pages\\Dashboard.js":"4","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\pages\\WidgetBuilder.js":"5","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\departments\\pages\\Departments.js":"6","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\settings\\pages\\Settings.js":"7","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\co-workers\\pages\\CoWorkers.js":"8","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\Header.js":"9","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\SideNav.js":"10","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\RegisterTwo.js":"11","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\context\\authContext.js":"12","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\Register.js":"13","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\login\\pages\\Login.js":"14","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\MondaySvg.js":"15","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\JiraSvg.js":"16","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\WidgetBuilderSvg.js":"17","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingLarge.js":"18","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingSmall.js":"19","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingMedium.js":"20","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Paragraph.js":"21","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Link.js":"22"},{"size":612,"mtime":1609879043876,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1609667750000,"results":"25","hashOfConfig":"24"},{"size":3914,"mtime":1611004334166,"results":"26","hashOfConfig":"24"},{"size":2230,"mtime":1611003963907,"results":"27","hashOfConfig":"24"},{"size":10786,"mtime":1610993351233,"results":"28","hashOfConfig":"24"},{"size":6616,"mtime":1610993351156,"results":"29","hashOfConfig":"24"},{"size":4369,"mtime":1610993351181,"results":"30","hashOfConfig":"24"},{"size":7344,"mtime":1610993351140,"results":"31","hashOfConfig":"24"},{"size":2034,"mtime":1609879043891,"results":"32","hashOfConfig":"24"},{"size":3905,"mtime":1609879043894,"results":"33","hashOfConfig":"24"},{"size":5334,"mtime":1611060190925,"results":"34","hashOfConfig":"24"},{"size":204,"mtime":1610528736139,"results":"35","hashOfConfig":"24"},{"size":3361,"mtime":1611057782574,"results":"36","hashOfConfig":"24"},{"size":3044,"mtime":1611004303557,"results":"37","hashOfConfig":"24"},{"size":35438,"mtime":1609879043900,"results":"38","hashOfConfig":"24"},{"size":20408,"mtime":1609879043898,"results":"39","hashOfConfig":"24"},{"size":1159,"mtime":1609879043903,"results":"40","hashOfConfig":"24"},{"size":350,"mtime":1610993351209,"results":"41","hashOfConfig":"24"},{"size":350,"mtime":1610993351212,"results":"42","hashOfConfig":"24"},{"size":353,"mtime":1610993351210,"results":"43","hashOfConfig":"24"},{"size":362,"mtime":1610993351213,"results":"44","hashOfConfig":"24"},{"size":321,"mtime":1610993351212,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ff1xbw",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\index.js",[],["97","98"],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\reportWebVitals.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\App.js",["99"],"import React, { useState, useCallback, useEffect } from \"react\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  Redirect,\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nimport Header from \"./shared/components/Header\";\r\nimport SideNav from './shared/components/SideNav';\r\nimport Dashboard from './dashboard/pages/Dashboard';\r\nimport WidgetBuilder from './widget-builder/pages/WidgetBuilder';\r\nimport Departments from './departments/pages/Departments';\r\nimport CoWorkers from './co-workers/pages/CoWorkers';\r\nimport Settings from './settings/pages/Settings';\r\nimport Register from './register/pages/Register';\r\nimport RegisterTwo from './register/pages/RegisterTwo';\r\nimport Login from './login/pages/Login';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\nimport './app.scss';\r\n\r\nimport { AuthContext } from './shared/context/authContext';\r\n\r\nimport Axios from 'axios';\r\n\r\nconst App = props => {\r\n  const [loggedIn, setLoggedIn ] = useState(false);\r\n  const [currUser, setCurrUser] = useState(null);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  // Login\r\n  const login = useCallback((user) => {\r\n    setLoggedIn(true);\r\n    setCurrUser(user);\r\n  }, []);\r\n \r\n  // Logout\r\n  const logout = () => {\r\n    setLoggedIn(false);\r\n    setCurrUser(null);\r\n    history.push('/login');\r\n  }\r\n\r\n  // Get the current user\r\n  const getCurrentUser = () => {\r\n     Axios({\r\n      method: \"GET\",\r\n      withCredentials: true,\r\n      url: \"/users/user\",\r\n      })\r\n      .then((user) => {\r\n        if(user.data.email){\r\n          console.log(user.data);\r\n          login(user.data);\r\n          if(user.data.jiraId === null){\r\n                    history.push('/register-step-two');\r\n                } else {\r\n                    history.push('/');\r\n                }\r\n          //return true;\r\n        }else {\r\n          logout(false);\r\n          return false;\r\n         \r\n        }\r\n      })\r\n      .catch(err => {\r\n      console.log(err);\r\n      return true;\r\n    });\r\n  };\r\n\r\n\r\n\r\n // Get current user's status\r\n async function status() {\r\n  let status = false;\r\n\r\n  return (loggedIn === false && currUser === null) ? status = await getCurrentUser() :\r\n            (loggedIn === undefined) ? status = false :\r\n              (loggedIn === true) ? status = true :\r\n                status\r\n}\r\n\r\n  // Authorization\r\n  const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n      status() ? <Component {...props} /> : <Redirect to=\"/login\" />\r\n    )} />\r\n  );\r\n  \r\n  \r\n\r\n  let route;\r\n\r\n  if (location.pathname === \"/login\" || location.pathname === \"/register\" || location.pathname === \"/register-step-two\") {\r\n    route = (\r\n      <React.Fragment>\r\n        <Route path=\"/login\" component={ Login }/>\r\n        <Route path=\"/register\" component={ Register }/>\r\n        <Route path=\"/register-step-two\" component={ RegisterTwo }/>\r\n      </React.Fragment>\r\n    );\r\n        \r\n      } else {  \r\n      route = (\r\n        <React.Fragment>\r\n          <div className=\"main-container\">\r\n          <SideNav className=\"side-nav\"></SideNav>\r\n            <div className=\"main\">\r\n              <Header></Header>\r\n              <Switch>\r\n                <PrivateRoute path=\"/\" exact component={ Dashboard }/>\r\n                <PrivateRoute path=\"/widget-builder\" component={ WidgetBuilder }/>\r\n                <PrivateRoute path=\"/departments\" component={ Departments }/>\r\n                <Route path=\"/co-workers\" component={ CoWorkers }/>\r\n                <Route path=\"/settings\" component={ Settings }/>\r\n              </Switch>    \r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  \r\n\r\n  return (\r\n    <AuthContext.Provider value={{loggedIn: loggedIn, login: login, logout: logout, currUser: currUser}}>\r\n      <React.Fragment>\r\n        { route }\r\n    </React.Fragment>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\dashboard\\pages\\Dashboard.js",["100","101","102","103"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { Button, Grid, Row, Col, FlexboxGrid, Container } from 'rsuite';\r\nimport Axios from 'axios';\r\n\r\nimport { AuthContext } from '../../shared/context/authContext';\r\n\r\nconst Dashboard = () => {\r\n    const auth = useContext(AuthContext);\r\n\r\n    const logoutUser = () => { \r\n        auth.logout();\r\n        Axios({\r\n            method: \"GET\",\r\n            withCredentials: true,\r\n            url: \"/users/logout\",\r\n            })\r\n            .catch(err => { throw err });\r\n        }\r\n\r\n        \r\n\r\n\r\n    return (\r\n        <Container className=\"container\">\r\n            <FlexboxGrid justify=\"space-between\" align=\"top\">\r\n                <FlexboxGrid.Item colspan={18}>\r\n                    <h3>My Dashboard</h3>\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item colspan={6} >\r\n                    <FlexboxGrid justify=\"end\">\r\n                        <Button color=\"orange button-shadow\" appearance=\"primary\" >Edit Dashboard</Button>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <div>\r\n            <Grid fluid>\r\n                <Row gutter={16}>\r\n                    <Col lg={12}>\r\n                        <div className=\"card\">\r\n                            <h1>Widget Card</h1>\r\n                            <Button onClick={logoutUser}>Logout</Button>\r\n                        </div>\r\n                    </Col>\r\n                    <Col lg={8}>\r\n                        <div className=\"card\">\r\n                            <h1>Widget Card</h1>\r\n                        </div>\r\n                    </Col>\r\n                    <Col lg={4}>\r\n                        <div className=\"card\">\r\n                            <h1>Widget Card</h1>\r\n                        </div>\r\n                    </Col>\r\n                    <Col lg={4}>\r\n                        <div className=\"card\">\r\n                            <h1>Widget Card</h1>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\pages\\WidgetBuilder.js",["104","105","106","107","108","109","110","111","112"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, FlexboxGrid, ButtonGroup, Input } from 'rsuite';\r\nimport './builder.scss';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport HeadingSmall from '../components/HeadingSmall';\r\nimport HeadingMedium from '../components/HeadingMedium';\r\nimport HeadingLarge from '../components/HeadingLarge';\r\nimport Paragraph from '../components/Paragraph';\r\nimport Link from '../components/Link';\r\nimport Axios from 'axios';\r\n\r\nexport default function WidgetBuilder(props) {\r\n    const avaialbleElements = [\r\n        {id: 'Heading-Small'},\r\n        {id: 'Heading-Medium'},\r\n        {id: 'Heading-Large'},\r\n        {id: 'Paragraph'}\r\n    ]\r\n    const [counter, setCounter] = useState(0)\r\n    const [availableElements, setAvailableElements] = useState(avaialbleElements);\r\n    const [addedElements, setAddedElements] = useState([]);\r\n    const [size, setSize] = useState(24);\r\n    const [lastFocus, setLastFocus] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [API, setAPI] = useState('');\r\n    const [errors, setErrors] = useState([])\r\n    \r\n\r\n\r\n    const handleElementText = (e) => {\r\n        let allAddedElements = addedElements;\r\n        const elementIndex = allAddedElements.findIndex(element => element.id.toString() === e.target.id);\r\n        setLastFocus(allAddedElements[elementIndex].id)\r\n        allAddedElements[elementIndex].content = e.target.value;\r\n        console.log(allAddedElements)\r\n        setAddedElements(allAddedElements);\r\n        setCounter(counter + 1);        \r\n    }\r\n\r\n    const removeFocus = () => {\r\n        setLastFocus('')\r\n    }\r\n\r\n    const changeCardSize = (e) => {\r\n        let element = document.getElementById(e.target.id);\r\n        //Removes orange color from all size buttons in the group\r\n        document.getElementById('size4').classList.remove('rs-btn-orange');\r\n        document.getElementById('size6').classList.remove('rs-btn-orange');\r\n        document.getElementById('size8').classList.remove('rs-btn-orange');\r\n        document.getElementById('size12').classList.remove('rs-btn-orange');\r\n        //Adds orange color on the clicked element\r\n        element.classList.add('rs-btn-orange');\r\n        //Saves size in state to switch the size of the card\r\n        setSize(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(lastFocus !== ''){\r\n            document.getElementById(lastFocus).focus();\r\n        }\r\n    }, [counter])\r\n\r\n    const AddElement = (props) => {\r\n        if(props.element === \"Heading-Small\"){return <HeadingSmall index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText}/>}\r\n        if(props.element === \"Heading-Medium\"){return <HeadingMedium index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText}/>}\r\n        if(props.element === \"Heading-Large\"){return <HeadingLarge index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText}/>}\r\n        if(props.element === \"Paragraph\"){return <Paragraph index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText}/>}\r\n        if(props.element === \"Link\"){return <Link index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText}/>}\r\n    }\r\n\r\n    function handleOnDragEnd(result){\r\n        if(!result.destination) return;\r\n        if(result.destination.droppableId === \"added-elements\" && result.source.droppableId === \"available-elements\" ){\r\n            let elements = addedElements;\r\n            let newElement = {\r\n                id: result.draggableId + counter,\r\n                identifier: result.draggableId,\r\n                content: '',\r\n                element: result.draggableId,\r\n                placeholder: \"Enter text\"\r\n            }\r\n            let addedElementArray = Array.from(addedElements);\r\n            addedElementArray.splice(result.destination.index, 0, newElement);\r\n            setAddedElements(addedElementArray);\r\n            setCounter(counter + 1);\r\n            return\r\n        } else if(result.destination.droppableId === \"added-elements\" && result.source.droppableId === \"added-elements\"){\r\n            const elementArray = Array.from(addedElements);\r\n            const [reorderedElementArray] = elementArray.splice(result.source.index, 1);\r\n            elementArray.splice(result.destination.index, 0, reorderedElementArray);\r\n            console.log(elementArray)\r\n            setAddedElements(elementArray);\r\n        } \r\n    }\r\n\r\n    const handleName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleDescription = (e) => {\r\n        setDescription(e.target.value);\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    Axios({\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data: {\r\n            name: name,\r\n            description: description,\r\n            api: API,\r\n            structure: addedElements\r\n        },\r\n        withCredentials: true,\r\n        url: \"/widget-builder/create-widget\",\r\n        }).then((res) => console.log(res));\r\n    }\r\n\r\n    return (\r\n        <div className=\"widget-builder-container\">\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n            <div className=\"widget-builder-side-bar\">\r\n                <h4 className=\"padding-bot-8\">Add Elements</h4>\r\n                <div id=\"element-picker\">\r\n                    <Droppable droppableId=\"available-elements\">\r\n                        {(provided) => \r\n                            <ul className=\"builder-element-list\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                \r\n                                {availableElements.map(({id}, index) => {\r\n                                    return(\r\n                                        <Draggable key={id} draggableId={id} index={index}>\r\n                                            {(provided) => \r\n                                                <li className=\"builder-element\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                                    <div>\r\n                                                        <img src=\"\" />\r\n                                                        <div>{id}</div>\r\n                                                    </div>                               \r\n                                                </li>\r\n                                            }\r\n                                        </Draggable>\r\n                                    )\r\n                                    \r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul> \r\n                        }\r\n                    </Droppable>\r\n                </div>\r\n\r\n                       \r\n            </div>\r\n           \r\n           \r\n            <div className=\"widget-builder-main-column container\">\r\n                 \r\n                <FlexboxGrid justify=\"center\">\r\n                    <FlexboxGrid.Item>\r\n                            <ButtonGroup id=\"size-btn-group\">\r\n                            <Button onClick={changeCardSize} id=\"size4\" value=\"6\" appearance='default' className=\"button-shadow\">4 Column</Button>\r\n                            <Button onClick={changeCardSize} id=\"size6\" value=\"12\" appearance='default' className=\"button-shadow\">6 Column</Button>\r\n                            <Button onClick={changeCardSize} id=\"size8\" value=\"18\" appearance='default' className=\"button-shadow\">8 Column</Button>\r\n                            <Button onClick={changeCardSize} id=\"size12\" value=\"24\" appearance='default' className=\"button-shadow\" color=\"orange\">12 Column</Button>\r\n                            </ButtonGroup>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                \r\n                <FlexboxGrid className=\"full-height\" justify=\"center\" align=\"middle\">\r\n                    \r\n\r\n                        <FlexboxGrid.Item colspan={size}>\r\n                            <Droppable droppableId=\"added-elements\">\r\n                                {(provided) => \r\n                                <ul className=\"builder-element-list element-card\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {console.log(addedElements)}\r\n                                    {addedElements.map(({id, element, content}, index) => {\r\n                                        return(\r\n                                            <Draggable key={id} draggableId={id} index={index}>\r\n                                                {(provided) => \r\n                                                    <li className=\"element\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                                        <AddElement id={id} index={index} content={content} element={element} />                       \r\n                                                    </li>\r\n                                                }\r\n                                            </Draggable>\r\n                                        )\r\n                                        \r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                </ul>\r\n                                }\r\n                            </Droppable>\r\n                            \r\n                            \r\n                        </FlexboxGrid.Item>\r\n\r\n                   \r\n                </FlexboxGrid>\r\n                \r\n            </div>\r\n        \r\n            <div className=\"widget-builder-side-bar\">\r\n                    <label>Widget name</label>\r\n                    <input className=\"widget-name\" onChange={handleName} />\r\n                    <label>Widget description</label>\r\n                    <textarea className=\"widget-description\" onChange={handleDescription} />\r\n                    <ButtonGroup justified className=\"padding-bot-16\">\r\n                        <Button appearance='default' color=\"orange\" className=\"button-shadow\">API</Button>\r\n                        <Button appearance='disabled' className=\"button-shadow\">CSS</Button>\r\n                    </ButtonGroup>\r\n                    <Button id=\"submit-btn\" className=\"width-100 button-shadow\" appearance='default' color=\"orange\" onClick={onSubmit}>Create widget</Button>\r\n               \r\n            </div>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n}\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\departments\\pages\\Departments.js",["113","114","115","116"],"import React, { useState } from 'react'\r\nimport { Table, FlexboxGrid, Progress, Tag, Input, InputGroup, Icon, Button, Avatar, Container } from 'rsuite';\r\n\r\n\r\nconst ProgressCell = ({ rowData, dataKey, ...props }) => (\r\n    <Table.Cell placement=\"start\" {...props} style={{ padding: 0, height: '100%' }}>\r\n        <FlexboxGrid align=\"center\" style={{ padding: 0, height: '100%', marginRight: '36px'}}>\r\n            <Progress.Line percent={rowData[dataKey]} strokeColor=\"#ffc107\" />\r\n        </FlexboxGrid>\r\n    </Table.Cell>\r\n);\r\nconst MembersCell = ({ rowData, dataKey, ...props }) => (\r\n    \r\n    <Table.Cell placement=\"center\" {...props} style={{ padding: 0, height: '100%' }}>\r\n        <FlexboxGrid align=\"start\" style={{ padding: '10px', height: '100%' }}>\r\n            <div className=\"avatar-group\">\r\n                 {\r\n                rowData.members.map(member => \r\n                    <Avatar size=\"sm\" className=\"avatar-margin avatar-color\">{member}</Avatar>\r\n                )\r\n            }\r\n            \r\n            </div>\r\n        </FlexboxGrid>\r\n    </Table.Cell>\r\n);\r\n\r\n\r\nexport default function Departments() {\r\n\r\n\r\n    const fakeData =[\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 175},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 85},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 25},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 0},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 55},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 40},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 95},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 45},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    ];\r\n    const [loading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [departments, setDepartments] = useState(fakeData);\r\n\r\n    const handleChangePage = (dataKey) =>{\r\n        setPage(dataKey)\r\n    }\r\n\r\n    const getData = (items) => {\r\n        const start = 10*page - 10;\r\n        const end = 10*page - 1;\r\n        let newItems = items.filter((item, i) => {return i >= start && i <= end});\r\n        return newItems\r\n    }\r\n\r\n\r\n    return (\r\n       <Container className=\"container\">\r\n            <FlexboxGrid justify=\"space-between\" align=\"middle\">\r\n                <FlexboxGrid.Item colspan={18}>\r\n                    <FlexboxGrid justify=\"start\"  align=\"middle\">\r\n                        <h3>Departments</h3>\r\n                        <div className=\"search\">\r\n                            <InputGroup size=\"md\">\r\n                                <Input />\r\n                                <InputGroup.Button>\r\n                                    <Icon icon=\"search\" />\r\n                                </InputGroup.Button>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item colspan={6}>\r\n                    <FlexboxGrid justify=\"end\">\r\n                        <Button className=\"button-margin-right button-shadow\" color=\"orange\">Table View</Button>\r\n                        <Button className=\"button-shadow\" color=\"white\">Card View</Button>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <div className=\"card\">\r\n                <Table autoHeight affixHeader affixHorizontalScrollbar data={getData(departments)}>\r\n                    <Table.Column width={240} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Department</Table.HeaderCell>\r\n                        <Table.Cell dataKey=\"departmentName\" />\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={240} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Members</Table.HeaderCell>\r\n                        <MembersCell dataKey=\"members\"/>\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={360} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Current Goal</Table.HeaderCell>\r\n                        <Table.Cell dataKey=\"currentGoal\" />\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={360} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Workload</Table.HeaderCell>\r\n                        <ProgressCell dataKey=\"workload\"/>\r\n                    </Table.Column>\r\n                    \r\n                </Table>\r\n                <Table.Pagination\r\n                    activePage={page}\r\n                    displayLength={10}\r\n                    total={departments.length}\r\n                    onChangePage={handleChangePage}\r\n                />\r\n            </div>\r\n            <FlexboxGrid justify=\"end\" align=\"top\">\r\n                <Button className=\"button-margin-top button-shadow\" color=\"orange\">Add New Department</Button>\r\n            </FlexboxGrid>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\settings\\pages\\Settings.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\co-workers\\pages\\CoWorkers.js",["117"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Table, FlexboxGrid, Progress, Tag, Input, InputGroup, Icon, Button, Container } from 'rsuite';\r\n\r\n\r\n\r\nconst ProgressCell = ({ rowData, dataKey, ...props }) => (\r\n    <Table.Cell placement=\"start\" {...props} style={{ padding: 0, height: '100%' }}>\r\n        <FlexboxGrid align=\"middle\" style={{ padding: 0, height: '100%', marginRight: '36px'}}>\r\n            <Progress.Line percent={rowData[dataKey]} strokeColor={rowData[dataKey] < 75 ? '#4caf50' : rowData[dataKey] > 75 && rowData[dataKey] < 100 ? '#ffc107' : \"#f44336\" } />\r\n        </FlexboxGrid>\r\n    </Table.Cell>\r\n);\r\nconst StatusCell = ({ rowData, dataKey, ...props }) => (\r\n    <Table.Cell placement=\"center\" {...props} style={{ padding: 0, height: '100%' }}>\r\n        <FlexboxGrid justify=\"start\" style={{ padding: '10px', height: '100%' }}>\r\n            <Tag color={rowData[dataKey] ? 'red' : 'green'}>{rowData[dataKey] ? 'Busy' : 'Free'}</Tag>\r\n        </FlexboxGrid>\r\n    </Table.Cell>\r\n);\r\n\r\n\r\n\r\n\r\nexport default function CoWorkers() {\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [coWorkers, setCoWorkers] = useState([])\r\n\r\n    const handleChangePage = (dataKey) =>{\r\n        setPage(dataKey)\r\n    }\r\n\r\n    const getData = (items) => {\r\n        const start = 10*page - 10;\r\n        const end = 10*page - 1;\r\n        let newItems = items.filter((item, i) => {return i >= start && i <= end});\r\n        return newItems\r\n    }\r\n   \r\n    const getCoWorkers = () => {\r\n        axios.get('https://widget-builder.herokuapp.com/co-workers')\r\n            .then((coWorkers) => {\r\n                //Filters out users that are not supposed to be in the list.\r\n                //This needs to be  done because Jira categorizes users and apps as the same thing. (Not sure why)\r\n                let filteredCoWorkers = coWorkers.data.filter(person => person.accountType === \"atlassian\")\r\n                mergeData(filteredCoWorkers);\r\n            })\r\n            .catch(err => console.log(err));\r\n        \r\n    }\r\n\r\n    const calculateWorkload = async (userId) => {\r\n        const resp = await axios.get(`https://widget-builder.herokuapp.com/co-workers/get-workload/${userId}`)\r\n            .then((allIssues) => {\r\n                let worktime = 0;\r\n                let est = 0;\r\n                let spt = 0;\r\n                if(allIssues.data.issues.length > 0){\r\n                    for(let i = 0; i < allIssues.data.issues.length; i++){\r\n                        if(allIssues.data.issues[i].fields.aggregateprogress.total !== null){\r\n                            // 648000 Seconds = 180 hours => Dividing by 6480 to convert to percent\r\n                            est = allIssues.data.issues[i].fields.aggregateprogress.total\r\n                        } else {\r\n                            est = 0;\r\n                        }\r\n                        if(allIssues.data.issues[i].fields.aggregateprogress.progress !== null){\r\n                            // 648000 Seconds = 180 hours => Dividing by 6480 to convert to percent\r\n                            spt = allIssues.data.issues[i].fields.aggregateprogress.progress\r\n                        } else {\r\n                            spt = 0;\r\n                        }\r\n                        if(est > spt){\r\n                            worktime = worktime + est;\r\n                        } else {\r\n                            worktime = worktime + spt;\r\n                        }\r\n                    }\r\n                    \r\n                    return Math.round(worktime / 6480);\r\n                    \r\n                } else {\r\n                    return 0;\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n        return resp;\r\n    }\r\n\r\n    const mergeData = async (atlassianData) => {\r\n        let mergedData = [];\r\n        for(let i = 0; i < atlassianData.length; i++){\r\n            let person = atlassianData[i];\r\n            let workload = await calculateWorkload(person.accountId);\r\n            let newPerson = {};\r\n            newPerson.name = person.displayName;\r\n            //newPerson.status = database.status\r\n            newPerson.workload = workload;\r\n            //newPerson.message = database.message\r\n            mergedData.push(newPerson);\r\n        };\r\n        setCoWorkers(mergedData);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCoWorkers();\r\n    },[])\r\n\r\n    return (\r\n        <Container className=\"container\">\r\n            <FlexboxGrid justify=\"space-between\" align=\"middle\">\r\n                <FlexboxGrid.Item colspan={18}>\r\n                    <FlexboxGrid justify=\"start\"  align=\"middle\">\r\n                        <h3>Co-Workers</h3>\r\n                        <div className=\"search\">\r\n                            <InputGroup size=\"md\">\r\n                                <Input />\r\n                                <InputGroup.Button>\r\n                                    <Icon icon=\"search\" />\r\n                                </InputGroup.Button>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item colspan={6}>\r\n                    <FlexboxGrid justify=\"end\">\r\n                        <Button className=\"button-margin-right button-shadow\" color=\"orange\">Table View</Button>\r\n                        <Button className=\"button-shadow\">Card View</Button>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <div className=\"card\">\r\n                <Table autoHeight affixHeader affixHorizontalScrollbar data={getData(coWorkers)}>\r\n                    <Table.Column width={240} justify=\"start\" resizable>\r\n                        <Table.HeaderCell>Name</Table.HeaderCell>\r\n                        <Table.Cell dataKey=\"name\" />\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={120} justify=\"start\" resizable>\r\n                        <Table.HeaderCell>Status</Table.HeaderCell>\r\n                        <StatusCell dataKey=\"busyStatus\"/>\r\n                    </Table.Column>\r\n                    \r\n                    <Table.Column width={240} justify=\"start\" resizable>\r\n                        <Table.HeaderCell>Job Title</Table.HeaderCell>\r\n                        <Table.Cell dataKey=\"jobTitle\" />\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={360} justify=\"start\" resizable>\r\n                        <Table.HeaderCell>Workload</Table.HeaderCell>\r\n                        <ProgressCell dataKey=\"workload\"/>\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={480} justify=\"start\" resizable>\r\n                        <Table.HeaderCell>Message</Table.HeaderCell>\r\n                        <Table.Cell dataKey=\"message\" />\r\n                    </Table.Column>\r\n                    \r\n                </Table>\r\n                <Table.Pagination\r\n                    activePage={page}\r\n                    displayLength={10}\r\n                    total={coWorkers.length}\r\n                    onChangePage={handleChangePage}\r\n                />\r\n            </div>\r\n            <Button onClick={getCoWorkers} className=\"button-shadow\" color=\"orange\">Get Co-Workers</Button>\r\n        </Container>\r\n    )\r\n}\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\Header.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\SideNav.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\RegisterTwo.js",["118"],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\context\\authContext.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\Register.js",["119"],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\login\\pages\\Login.js",["120"],"import React, { useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Col, Input, Button } from 'rsuite';\r\nimport Axios from 'axios';\r\n\r\nimport WidgetBuilderSvg from '../../shared/svgs/WidgetBuilderSvg';\r\nimport '../../register/pages/register.scss';\r\n\r\nconst Login = props =>  {\r\n    const history = useHistory();\r\n\r\n    const registerClicked = () => {\r\n        history.push('/register');\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        Axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: {\r\n                email: event.target.email.value,\r\n                password: event.target.password.value\r\n            },\r\n            withCredentials: true,\r\n            url: \"/users/login\",\r\n            })\r\n            .then((res) => {\r\n                console.log(res);\r\n                history.push('/');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"register-container\">\r\n            <Container className=\"container content\">\r\n                <span className=\"center\">\r\n                    <WidgetBuilderSvg/>\r\n                </span>\r\n\r\n                <Col lg={6} className=\"center\">\r\n                    <div className=\"card\">\r\n                        <form onSubmit={onSubmit}>\r\n                            <h4>Log in</h4>\r\n                            <div className=\"button-margin-top\">\r\n                                <label for=\"email\">Email</label>\r\n                                <Input name=\"email\" placeholder=\"Email\" />\r\n                            </div>\r\n                            \r\n                            <div className=\"button-margin-top\">   \r\n                                <label for=\"password\">Password</label>\r\n                                <Input name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n                            </div>\r\n                        \r\n                            <Button \r\n                                className=\"submit-button button-margin-top bold button-shadow\" \r\n                                type=\"submit\" \r\n                                color=\"orange\">\r\n                                Log in\r\n                            </Button>\r\n                            <Button \r\n                                className=\"submit-button divider-margin-top bold button-shadow\" \r\n                                onClick={registerClicked}\r\n                                color=\"orange\" \r\n                                appearance=\"ghost\">\r\n                                Sign up\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </Col>\r\n            </Container>\r\n\r\n            <footer className=\"footer\">\r\n                <p>Developed by Maria and Tomas 2020</p>\r\n                <p>All rights reserved by Maria and Tomas 2020</p>\r\n            </footer>\r\n        </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default Login;","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\MondaySvg.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\JiraSvg.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\WidgetBuilderSvg.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingLarge.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingSmall.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingMedium.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Paragraph.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Link.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":1,"column":40,"nodeType":"127","messageId":"128","endLine":1,"endColumn":49},{"ruleId":"125","severity":1,"message":"129","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"126","line":1,"column":39,"nodeType":"127","messageId":"128","endLine":1,"endColumn":48},{"ruleId":"125","severity":1,"message":"130","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":20},{"ruleId":"125","severity":1,"message":"131","line":2,"column":22,"nodeType":"127","messageId":"128","endLine":2,"endColumn":30},{"ruleId":"125","severity":1,"message":"132","line":2,"column":44,"nodeType":"127","messageId":"128","endLine":2,"endColumn":49},{"ruleId":"125","severity":1,"message":"133","line":20,"column":31,"nodeType":"127","messageId":"128","endLine":20,"endColumn":51},{"ruleId":"125","severity":1,"message":"134","line":26,"column":17,"nodeType":"127","messageId":"128","endLine":26,"endColumn":23},{"ruleId":"125","severity":1,"message":"135","line":27,"column":12,"nodeType":"127","messageId":"128","endLine":27,"endColumn":18},{"ruleId":"125","severity":1,"message":"136","line":27,"column":20,"nodeType":"127","messageId":"128","endLine":27,"endColumn":29},{"ruleId":"125","severity":1,"message":"137","line":41,"column":11,"nodeType":"127","messageId":"128","endLine":41,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":62,"column":8,"nodeType":"140","endLine":62,"endColumn":17,"suggestions":"141"},{"ruleId":"125","severity":1,"message":"142","line":75,"column":17,"nodeType":"127","messageId":"128","endLine":75,"endColumn":25},{"ruleId":"143","severity":1,"message":"144","line":140,"column":57,"nodeType":"145","endLine":140,"endColumn":71},{"ruleId":"125","severity":1,"message":"146","line":2,"column":40,"nodeType":"127","messageId":"128","endLine":2,"endColumn":43},{"ruleId":"125","severity":1,"message":"147","line":48,"column":12,"nodeType":"127","messageId":"128","endLine":48,"endColumn":19},{"ruleId":"125","severity":1,"message":"148","line":48,"column":21,"nodeType":"127","messageId":"128","endLine":48,"endColumn":31},{"ruleId":"125","severity":1,"message":"149","line":50,"column":25,"nodeType":"127","messageId":"128","endLine":50,"endColumn":39},{"ruleId":"138","severity":1,"message":"150","line":107,"column":7,"nodeType":"140","endLine":107,"endColumn":9,"suggestions":"151"},{"ruleId":"125","severity":1,"message":"152","line":8,"column":8,"nodeType":"127","messageId":"128","endLine":8,"endColumn":17},{"ruleId":"125","severity":1,"message":"126","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":26},{"ruleId":"125","severity":1,"message":"153","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":27},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useHistory' is defined but never used.","'Redirect' is defined but never used.","'Input' is defined but never used.","'setAvailableElements' is assigned a value but never used.","'setAPI' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'removeFocus' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lastFocus'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'elements' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Tag' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setDepartments' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCoWorkers'. Either include it or remove the dependency array.",["157"],"'MondaySvg' is defined but never used.","'useContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [counter, lastFocus]",{"range":"162","text":"163"},"Update the dependencies array to be: [getCoWorkers]",{"range":"164","text":"165"},[2540,2549],"[counter, lastFocus]",[4402,4404],"[getCoWorkers]"]