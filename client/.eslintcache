[{"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\index.js":"1","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\reportWebVitals.js":"2","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\App.js":"3","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\dashboard\\pages\\Dashboard.js":"4","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\pages\\WidgetBuilder.js":"5","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\departments\\pages\\Departments.js":"6","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\settings\\pages\\Settings.js":"7","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\co-workers\\pages\\CoWorkers.js":"8","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\Header.js":"9","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\SideNav.js":"10","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\RegisterTwo.js":"11","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\context\\authContext.js":"12","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\Register.js":"13","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\login\\pages\\Login.js":"14","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\MondaySvg.js":"15","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\JiraSvg.js":"16","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\WidgetBuilderSvg.js":"17","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingLarge.js":"18","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingSmall.js":"19","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingMedium.js":"20","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Paragraph.js":"21","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Link.js":"22","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\popup\\Popup.js":"23","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\dashboard\\pages\\EditDashboard.js":"24","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\ProgressBar.js":"25","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\ProgressCircle.js":"26"},{"size":612,"mtime":1609879043876,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1609667750000,"results":"29","hashOfConfig":"28"},{"size":4080,"mtime":1611487808841,"results":"30","hashOfConfig":"28"},{"size":7355,"mtime":1611518133336,"results":"31","hashOfConfig":"28"},{"size":15819,"mtime":1611507097974,"results":"32","hashOfConfig":"28"},{"size":6616,"mtime":1610993351156,"results":"33","hashOfConfig":"28"},{"size":4369,"mtime":1610993351181,"results":"34","hashOfConfig":"28"},{"size":8065,"mtime":1611525835766,"results":"35","hashOfConfig":"28"},{"size":7261,"mtime":1611526482622,"results":"36","hashOfConfig":"28"},{"size":3905,"mtime":1609879043894,"results":"37","hashOfConfig":"28"},{"size":5334,"mtime":1611067694424,"results":"38","hashOfConfig":"28"},{"size":204,"mtime":1610528736139,"results":"39","hashOfConfig":"28"},{"size":3361,"mtime":1611067694424,"results":"40","hashOfConfig":"28"},{"size":3044,"mtime":1611004303557,"results":"41","hashOfConfig":"28"},{"size":35438,"mtime":1609879043900,"results":"42","hashOfConfig":"28"},{"size":20408,"mtime":1609879043898,"results":"43","hashOfConfig":"28"},{"size":1159,"mtime":1609879043903,"results":"44","hashOfConfig":"28"},{"size":714,"mtime":1611505462708,"results":"45","hashOfConfig":"28"},{"size":710,"mtime":1611344370745,"results":"46","hashOfConfig":"28"},{"size":714,"mtime":1611344370745,"results":"47","hashOfConfig":"28"},{"size":655,"mtime":1611344370747,"results":"48","hashOfConfig":"28"},{"size":669,"mtime":1611344370746,"results":"49","hashOfConfig":"28"},{"size":891,"mtime":1611067694426,"results":"50","hashOfConfig":"28"},{"size":5561,"mtime":1611502847444,"results":"51","hashOfConfig":"28"},{"size":962,"mtime":1611507338695,"results":"52","hashOfConfig":"28"},{"size":1361,"mtime":1611508556797,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1ff1xbw",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"56"},"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\index.js",[],["118","119"],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\reportWebVitals.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\App.js",["120"],"import React, { useState, useCallback, useEffect } from \"react\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  Redirect,\r\n  useHistory\r\n} from \"react-router-dom\";\r\n\r\nimport Header from \"./shared/components/Header\";\r\nimport SideNav from './shared/components/SideNav';\r\nimport Dashboard from './dashboard/pages/Dashboard';\r\nimport EditDashboard from './dashboard/pages/EditDashboard';\r\nimport WidgetBuilder from './widget-builder/pages/WidgetBuilder';\r\nimport Departments from './departments/pages/Departments';\r\nimport CoWorkers from './co-workers/pages/CoWorkers';\r\nimport Settings from './settings/pages/Settings';\r\nimport Register from './register/pages/Register';\r\nimport RegisterTwo from './register/pages/RegisterTwo';\r\nimport Login from './login/pages/Login';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\nimport './app.scss';\r\n\r\nimport { AuthContext } from './shared/context/authContext';\r\n\r\nimport Axios from 'axios';\r\n\r\nconst App = props => {\r\n  const [loggedIn, setLoggedIn ] = useState(false);\r\n  const [currUser, setCurrUser] = useState(null);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  // Login\r\n  const login = useCallback((user) => {\r\n    setLoggedIn(true);\r\n    setCurrUser(user);\r\n  }, []);\r\n \r\n  // Logout\r\n  const logout = () => {\r\n    setLoggedIn(false);\r\n    setCurrUser(null);\r\n    history.push('/login');\r\n  }\r\n\r\n  // Get the current user\r\n  const getCurrentUser = () => {\r\n     Axios({\r\n      method: \"GET\",\r\n      withCredentials: true,\r\n      url: \"/users/user\",\r\n      })\r\n      .then((user) => {\r\n        if(user.data.email){\r\n          console.log(user.data);\r\n          login(user.data);\r\n          if(user.data.jiraId === null){\r\n                    history.push('/register-step-two');\r\n                } else {\r\n                    history.push('/');\r\n                }\r\n          //return true;\r\n        }else {\r\n          logout(false);\r\n          return false;\r\n         \r\n        }\r\n      })\r\n      .catch(err => {\r\n      console.log(err);\r\n      return true;\r\n    });\r\n  };\r\n\r\n\r\n\r\n // Get current user's status\r\n async function status() {\r\n  let status = false;\r\n\r\n  return (loggedIn === false && currUser === null) ? status = await getCurrentUser() :\r\n            (loggedIn === undefined) ? status = false :\r\n              (loggedIn === true) ? status = true :\r\n                status\r\n}\r\n\r\n  // Authorization\r\n  const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n      status() ? <Component {...props} /> : <Redirect to=\"/login\" />\r\n    )} />\r\n  );\r\n  \r\n  \r\n\r\n  let route;\r\n\r\n  if (location.pathname === \"/login\" || location.pathname === \"/register\" || location.pathname === \"/register-step-two\") {\r\n    route = (\r\n      <React.Fragment>\r\n        <Route path=\"/login\" component={ Login }/>\r\n        <Route path=\"/register\" component={ Register }/>\r\n        <Route path=\"/register-step-two\" component={ RegisterTwo }/>\r\n      </React.Fragment>\r\n    );\r\n        \r\n      } else {  \r\n      route = (\r\n        <React.Fragment>\r\n          <div className=\"main-container\">\r\n          <SideNav className=\"side-nav\"></SideNav>\r\n            <div className=\"main\">\r\n              <Header></Header>\r\n              <Switch>\r\n                <PrivateRoute path=\"/\" exact component={ Dashboard }/>\r\n                <PrivateRoute path=\"/edit-dashboard\" exact component={ EditDashboard }/>\r\n                <PrivateRoute path=\"/widget-builder\" component={ WidgetBuilder }/>\r\n                <PrivateRoute path=\"/departments\" component={ Departments }/>\r\n                <PrivateRoute path=\"/co-workers\" component={ CoWorkers }/>\r\n                <PrivateRoute path=\"/settings\" component={ Settings }/>\r\n              </Switch>    \r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n  \r\n\r\n  return (\r\n    <AuthContext.Provider value={{loggedIn: loggedIn, login: login, logout: logout, currUser: currUser}}>\r\n      <React.Fragment>\r\n        { route }\r\n    </React.Fragment>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\dashboard\\pages\\Dashboard.js",["121","122","123","124","125"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { Button, Grid, Row, Col, FlexboxGrid, Container, Loader, Progress } from 'rsuite';\r\nimport Axios from 'axios';\r\n\r\nimport { AuthContext } from '../../shared/context/authContext';\r\nimport { disconnect } from 'mongoose';\r\n\r\nconst Dashboard = () => {\r\n    const [widgets, setWidgets] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext);\r\n    const editDashboardClicked = () => {\r\n        history.push('/edit-dashboard');\r\n    }\r\n\r\n    const RenderWidget = (widget) => {\r\n        let struct = widget.widget.structure;\r\n       // console.log(struct)\r\n        let Rendering = document.createElement(\"div\");\r\n        //console.log(Rendering)\r\n        /*\r\n        var para = document.createElement(\"p\");\r\n        var node = document.createTextNode(\"This is new.\");\r\n        para.appendChild(node);\r\n        */\r\n        let newElement\r\n        for(let i=0; i < struct.length; i++){\r\n            newElement = document.createElement(\"div\");\r\n            Rendering.appendChild(newElement)\r\n        }\r\n        //console.log(Rendering)\r\n        return Rendering.toString()\r\n    }\r\n\r\n    const APIRequests = async (request, key) => {\r\n        //console.log(request)\r\n        const resp = Axios.get(request)\r\n        .then((result) => {\r\n            //console.log(result.data[key])\r\n            let data\r\n            if(Array.isArray(result.data[key])){\r\n\r\n                //console.log(result.data[key][0])\r\n                data = result.data[key][0].description\r\n            } else if(typeof result.data[key] === \"object\" && !Array.isArray(result.data[key])){\r\n                //console.log(\"OBEJCT IDENTIFIED\")\r\n                //console.log(result.data[key])\r\n                //console.log(Object.keys(result.data[key]))\r\n                //console.log(Object.keys(Object.keys(result.data[key]))[0]); \r\n                let innerKey = Object.keys(result.data[key])[0];\r\n                //console.log(innerKey)\r\n                //console.log(result.data[key][innerKey])\r\n                data = result.data[key][innerKey];\r\n            } else {\r\n                data = result.data[key]\r\n            }\r\n           \r\n            return data;\r\n        })\r\n        return resp\r\n    }\r\n\r\n    const getWidgets = async () => {\r\n        setLoading(true);\r\n        //console.log(auth.currUser)\r\n        if(auth.currUser){\r\n             Axios.get(`/widgets/my-dashboard-widgets/${auth.currUser.myDashboardWidgets}`)\r\n            .then(async (myWidgets) => {\r\n               \r\n                let result = myWidgets.data.filter(dashboardWidget => dashboardWidget._id === auth.currUser.myDashboardWidgets);\r\n                for(let i=0; i < result[0].widgets.length; i++){\r\n                    if(result[0].widgets[i].api !== undefined){\r\n                        for(let j=0; j < result[0].widgets[i].structure.length; j++){\r\n\r\n                            if(result[0].widgets[i].structure[j].apiKey !== null){\r\n                            \r\n\r\n                            let data = await APIRequests(result[0].widgets[i].api, result[0].widgets[i].structure[j].apiKey);\r\n                            //console.log(data)\r\n                            result[0].widgets[i].structure[j].content = await APIRequests(result[0].widgets[i].api, result[0].widgets[i].structure[j].apiKey)\r\n                        }\r\n                    }\r\n                        }\r\n                        \r\n                }\r\n               \r\n                //console.log(result)\r\n                \r\n                setWidgets(result[0].widgets);\r\n                setLoading(false);\r\n                \r\n                //Filters out users that are not supposed to be in the list.\r\n                //This needs to be  done because Jira categorizes users and apps as the same thing. (Not sure why)\r\n               \r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n        getWidgets();\r\n    }, [])\r\n\r\n    return (\r\n        <Container className=\"container\">\r\n            <FlexboxGrid justify=\"space-between\" align=\"top\">\r\n                <FlexboxGrid.Item colspan={18}>\r\n                    <h3>My Dashboard</h3>\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item colspan={6} >\r\n                    <FlexboxGrid justify=\"end\">\r\n                        <Button color=\"orange button-shadow\" appearance=\"primary\" onClick={() => editDashboardClicked()}>Edit Dashboard</Button>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <div>\r\n            <Grid fluid>\r\n                <Row gutter={16}>\r\n                {\r\n                    loading === true ?\r\n                        <div className=\"position-center\">\r\n                            <Loader size=\"lg\" />\r\n                        </div>\r\n                        :\r\n                    widgets.length > 0 ?\r\n                    widgets.map((widget, index) => {\r\n                        return(\r\n                            <Col lg={12}>\r\n                                <div className=\"card\" >\r\n                                    {widget.structure.map((item) => {\r\n                                        if(item.identifier === \"Progress-Bar\"){\r\n                                            return(\r\n                                                <div className={item.element} id={item.id}>\r\n                                                    <Progress.Line percent={item.content}/>\r\n                                                </div>\r\n                                            )\r\n                                            } else if(item.identifier === \"Progress-Circle\"){\r\n                                            return(\r\n                                                <div className={item.element} id={item.id}>\r\n                                                    <Progress.Circle percent={item.content} className=\"circle-max\"/>\r\n                                                </div>\r\n                                            )\r\n                                            } else {\r\n                                                return(\r\n                                                    <div className={item.element} id={item.id}>\r\n                                                        {item.content}\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        \r\n                                        \r\n                                        \r\n                                    })}\r\n                                </div>\r\n                            </Col>\r\n                            )\r\n                        }) : \r\n                        \r\n                        <div className=\"no-widget-message\">\r\n                            <p className=\"no-widget-\">Click Edit Widgets to add a widget</p>\r\n                        </div>\r\n                            \r\n                    }\r\n                </Row>\r\n            </Grid>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\pages\\WidgetBuilder.js",["126","127","128","129","130","131"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, FlexboxGrid, ButtonGroup, Tree } from 'rsuite';\r\nimport './builder.scss';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport HeadingSmall from '../components/HeadingSmall';\r\nimport HeadingMedium from '../components/HeadingMedium';\r\nimport HeadingLarge from '../components/HeadingLarge';\r\nimport Paragraph from '../components/Paragraph';\r\nimport Link from '../components/Link';\r\nimport ProgressBar from '../components/ProgressBar';\r\nimport ProgressCircle from '../components/ProgressCircle';\r\nimport Axios from 'axios';\r\n\r\nexport default function WidgetBuilder(props) {\r\n    const history = useHistory();\r\n\r\n    const avaialbleElements = [\r\n        {id: 'Heading-Small'},\r\n        {id: 'Heading-Medium'},\r\n        {id: 'Heading-Large'},\r\n        {id: 'Paragraph'},\r\n        {id: 'Progress-Bar'},\r\n        {id: 'Progress-Circle'}\r\n    ]\r\n    const [counter, setCounter] = useState(0)\r\n    const [availableElements, setAvailableElements] = useState(avaialbleElements);\r\n    const [addedElements, setAddedElements] = useState([]);\r\n    const [size, setSize] = useState(24);\r\n    const [lastFocus, setLastFocus] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [API, setAPI] = useState('');\r\n    const [APITest, setAPITest] = useState([]);\r\n    const [header, setHeader] = useState('{ \"Content-Type\":\"application/json\" }');\r\n    const [errors, setErrors] = useState([]);\r\n    const [selectedElement, setSelectedElement] = useState(null);\r\n\r\n\r\n    const handleElementText = (e) => {\r\n        console.log(e.target)\r\n        let allAddedElements = addedElements;\r\n        const elementIndex = allAddedElements.findIndex(element => element.id.toString() === e.target.id);\r\n        setLastFocus(allAddedElements[elementIndex].id)\r\n        allAddedElements[elementIndex].content = e.target.value;\r\n        setAddedElements(allAddedElements);\r\n        setCounter(counter + 1);        \r\n    }\r\n\r\n    const selectElement = (e) => {\r\n        \r\n        if(document.getElementsByClassName('rs-tree-node-active')[0] !== undefined){\r\n            document.getElementsByClassName('rs-tree-node-active')[0].classList.remove('rs-tree-node-active');\r\n        }\r\n        \r\n        for(let i=0; i < addedElements.length; i++){\r\n            if(addedElements[i].id === e.target.id){\r\n                /*\r\n                if(addedElements[i].apiKey !== null){\r\n                    //console.log(document.getElementsByClassName('rs-tree-node-active')[0])\r\n                    document.getElementsByClassName('rs-tree-node-active')[0] = addedElements[i].apiKey;\r\n                }\r\n                */\r\n                console.log(e.target.id)\r\n                setSelectedElement(e.target.id)\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const handleTreeSelect = (item) => {\r\n        console.log(item)\r\n        for(let i=0; i < addedElements.length; i++){\r\n            if(addedElements[i].id === selectedElement){\r\n                addedElements[i].apiKey = item\r\n                setCounter(counter + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    const removeFocus = () => {\r\n        setLastFocus('')\r\n    }\r\n\r\n    const changeCardSize = (e) => {\r\n        let element = document.getElementById(e.target.id);\r\n        //Removes orange color from all size buttons in the group\r\n        document.getElementById('size4').classList.remove('rs-btn-orange');\r\n        document.getElementById('size6').classList.remove('rs-btn-orange');\r\n        document.getElementById('size8').classList.remove('rs-btn-orange');\r\n        document.getElementById('size12').classList.remove('rs-btn-orange');\r\n        //Adds orange color on the clicked element\r\n        element.classList.add('rs-btn-orange');\r\n        //Saves size in state to switch the size of the card\r\n        setSize(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        if(lastFocus !== ''){\r\n            document.getElementById(lastFocus).focus();\r\n        }\r\n    }, [counter])\r\n\r\n    const AddElement = (props) => {\r\n        if(props.element === \"Heading-Small\"){return <HeadingSmall apiKey={props.apiKey} index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText} selectElement={selectElement} />}\r\n        if(props.element === \"Heading-Medium\"){return <HeadingMedium apiKey={props.apiKey} index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText} selectElement={selectElement} />}\r\n        if(props.element === \"Heading-Large\"){return <HeadingLarge apiKey={props.apiKey} index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText} selectElement={selectElement} />}\r\n        if(props.element === \"Paragraph\"){return <Paragraph apiKey={props.apiKey} index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText} selectElement={selectElement} />}\r\n        if(props.element === \"Link\"){return <Link apiKey={props.apiKey} index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText} selectElement={selectElement} />}\r\n        if(props.element === \"Progress-Bar\") {return <ProgressBar apiKey={props.apiKey} index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText} selectElement={selectElement} />}\r\n        if(props.element === \"Progress-Circle\") {return <ProgressCircle apiKey={props.apiKey} index={props.index} content={props.content} identifier={props.id} handleElementText={handleElementText} selectElement={selectElement} />}\r\n    }\r\n\r\n    function handleOnDragEnd(result){\r\n        \r\n        if(document.getElementsByClassName('rs-tree-node-active')[0] !== undefined){\r\n            document.getElementsByClassName('rs-tree-node-active')[0].classList.remove('rs-tree-node-active');\r\n        }\r\n        \r\n        if(!result.destination) return;\r\n        if(result.destination.droppableId === \"added-elements\" && result.source.droppableId === \"available-elements\" ){\r\n            let elements = addedElements;\r\n            let newElement = {\r\n                id: result.draggableId + counter,\r\n                identifier: result.draggableId,\r\n                content: '',\r\n                element: result.draggableId,\r\n                placeholder: \"Enter text\",\r\n                apiKey: null\r\n            }\r\n            let addedElementArray = Array.from(addedElements);\r\n            addedElementArray.splice(result.destination.index, 0, newElement);\r\n            setAddedElements(addedElementArray);\r\n            setCounter(counter + 1);\r\n            return\r\n        } else if(result.destination.droppableId === \"added-elements\" && result.source.droppableId === \"added-elements\"){\r\n            const elementArray = Array.from(addedElements);\r\n            const [reorderedElementArray] = elementArray.splice(result.source.index, 1);\r\n            elementArray.splice(result.destination.index, 0, reorderedElementArray);\r\n            console.log(elementArray)\r\n            setAddedElements(elementArray);\r\n        }\r\n        if(result.destination.droppableId === \"remove-elements\"){\r\n            const elementArray = addedElements.filter(element => element.id !== result.draggableId);\r\n            setAddedElements(elementArray);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    const handleName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleDescription = (e) => {\r\n        setDescription(e.target.value);\r\n    }\r\n\r\n    const handleAPI = (e) => {\r\n        setAPI(e.target.value);\r\n    }\r\n    \r\n    const handleHeader = (e) => {\r\n        setHeader(e.target.value);\r\n    }\r\n\r\n    const testAPI = () => {\r\n        console.log(\"testing API\")\r\n        console.log(header)\r\n        let customHeader = JSON.parse(header);\r\n        console.log(customHeader);\r\n\r\n        Axios({\r\n            method: \"GET\",\r\n            headers: customHeader,\r\n            withCredentials: false,\r\n            url: API,\r\n        }).then((res) => {\r\n            let result = res.data;\r\n            let resultArray = [];\r\n            let format;\r\n            for(let prop in result){\r\n                //console.log(result[prop])\r\n                \r\n                    format = {\r\n                        name: prop,\r\n                    }\r\n                \r\n                resultArray.push(format);\r\n            }\r\n            console.log(resultArray)\r\n            //Object.keys(result).forEach(item => console.log(item))\r\n            setAPITest(resultArray);\r\n        })\r\n        \r\n    }\r\n\r\n\r\n\r\n    const onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    Axios({\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data: {\r\n            name: name,\r\n            description: description,\r\n            api: API,\r\n            header: header,\r\n            structure: addedElements\r\n        },\r\n        withCredentials: true,\r\n        url: \"/widget-builder/create-widget\",\r\n        }).then((res) => history.push('/'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"widget-builder-container\">\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n            <div className=\"widget-builder-left-side-bar\">\r\n                <h4 className=\"padding-bot-8\">Add Elements</h4>\r\n                <div id=\"element-picker\">\r\n                    <Droppable droppableId=\"available-elements\">\r\n                        {(provided) => \r\n                            <ul className=\"builder-element-list\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                \r\n                                {availableElements.map(({id}, index) => {\r\n                                    return(\r\n                                        <Draggable key={id} draggableId={id} index={index}>\r\n                                            {(provided) => \r\n                                                <li className=\"builder-element\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                                    <div>\r\n                                                        <div>{id}</div>\r\n                                                    </div>                               \r\n                                                </li>\r\n                                            }\r\n                                        </Draggable>\r\n                                    )\r\n                                    \r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul> \r\n                        }\r\n                    </Droppable>\r\n                    \r\n                </div>\r\n\r\n                <Droppable  droppableId=\"remove-elements\">\r\n                    {(provided) => \r\n                        <div className=\"remove-elements\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                            <span>Remove element</span>\r\n                        </div>\r\n                    }\r\n                </Droppable>\r\n            </div>\r\n           \r\n           \r\n            <div className=\"widget-builder-main-column container\">\r\n                 \r\n                <FlexboxGrid justify=\"center\">\r\n                    <FlexboxGrid.Item>\r\n                            <ButtonGroup id=\"size-btn-group\">\r\n                            <Button onClick={changeCardSize} id=\"size4\" value=\"6\" appearance='default' className=\"button-shadow\">4 Column</Button>\r\n                            <Button onClick={changeCardSize} id=\"size6\" value=\"12\" appearance='default' className=\"button-shadow\">6 Column</Button>\r\n                            <Button onClick={changeCardSize} id=\"size8\" value=\"18\" appearance='default' className=\"button-shadow\">8 Column</Button>\r\n                            <Button onClick={changeCardSize} id=\"size12\" value=\"24\" appearance='default' className=\"button-shadow\" color=\"orange\">12 Column</Button>\r\n                            </ButtonGroup>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                \r\n                <FlexboxGrid className=\"full-height\" justify=\"center\" align=\"middle\">\r\n                    \r\n\r\n                        <FlexboxGrid.Item colspan={size}>\r\n                            <Droppable droppableId=\"added-elements\">\r\n                                {(provided) => \r\n                                <ul className=\"builder-element-list element-card\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                    {addedElements.map(({id, element, content, apiKey}, index) => {\r\n                                        return(\r\n                                            <Draggable key={id} draggableId={id} index={index}>\r\n                                                {(provided) => \r\n                                                    <li className=\"element\" {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                                                        <AddElement id={id} index={index} content={content} apiKey={apiKey} element={element} />                       \r\n                                                    </li>\r\n                                                }\r\n                                            </Draggable>\r\n                                        )\r\n                                        \r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                </ul>\r\n                                }\r\n                            </Droppable>\r\n                            \r\n                            \r\n                        </FlexboxGrid.Item>\r\n\r\n                   \r\n                </FlexboxGrid>\r\n                \r\n            </div>\r\n        \r\n            <div className=\"widget-builder-right-side-bar\">\r\n                <h4 className=\"padding-bot-8\">Settings</h4>\r\n                <label>Widget name</label>\r\n                <input className=\"widget-name\" onChange={handleName} />\r\n                <label>Widget description</label>\r\n                <textarea className=\"widget-description\" onChange={handleDescription} />\r\n                <label>API Link</label>\r\n                <input className=\"widget-name\" onChange={handleAPI} />\r\n                <label>Header Key</label>\r\n                <textarea className=\"widget-header widget-description\" onChange={handleHeader}>\r\n                   &#123; \r\n                   \"Content-Type\":\"application/json\"\r\n                   &#125;\r\n                    \r\n                </textarea>\r\n                \r\n                {/* \r\n                    <ButtonGroup justified className=\"padding-bot-16\">\r\n                        <Button appearance='default' color=\"orange\" className=\"button-shadow\">API</Button>\r\n                        <Button appearance='disabled' className=\"button-shadow\">CSS</Button>\r\n                    </ButtonGroup>\r\n                */}\r\n                <Button id=\"submit-btn\" className=\"button-margin-bot width-100 button-shadow\" appearance='ghost' color=\"orange\" onClick={testAPI}>Test API</Button>\r\n                <div>\r\n                    <Tree id=\"tree\" className=\"tree-selector\" onChange={handleTreeSelect} data={APITest} virtualize labelKey=\"name\" valueKey=\"name\"  />\r\n                </div>\r\n                <Button id=\"submit-btn\" className=\"button-margin-top width-100 button-shadow\" appearance='default' color=\"orange\" onClick={onSubmit}>Create widget</Button>\r\n               \r\n            </div>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n}\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\departments\\pages\\Departments.js",["132","133","134","135"],"import React, { useState } from 'react'\r\nimport { Table, FlexboxGrid, Progress, Tag, Input, InputGroup, Icon, Button, Avatar, Container } from 'rsuite';\r\n\r\n\r\nconst ProgressCell = ({ rowData, dataKey, ...props }) => (\r\n    <Table.Cell placement=\"start\" {...props} style={{ padding: 0, height: '100%' }}>\r\n        <FlexboxGrid align=\"center\" style={{ padding: 0, height: '100%', marginRight: '36px'}}>\r\n            <Progress.Line percent={rowData[dataKey]} strokeColor=\"#ffc107\" />\r\n        </FlexboxGrid>\r\n    </Table.Cell>\r\n);\r\nconst MembersCell = ({ rowData, dataKey, ...props }) => (\r\n    \r\n    <Table.Cell placement=\"center\" {...props} style={{ padding: 0, height: '100%' }}>\r\n        <FlexboxGrid align=\"start\" style={{ padding: '10px', height: '100%' }}>\r\n            <div className=\"avatar-group\">\r\n                 {\r\n                rowData.members.map(member => \r\n                    <Avatar size=\"sm\" className=\"avatar-margin avatar-color\">{member}</Avatar>\r\n                )\r\n            }\r\n            \r\n            </div>\r\n        </FlexboxGrid>\r\n    </Table.Cell>\r\n);\r\n\r\n\r\nexport default function Departments() {\r\n\r\n\r\n    const fakeData =[\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 175},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 85},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 25},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 0},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 55},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 40},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 95},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 45},\r\n                    {\"departmentName\": 'Front-end Development', \"members\": [\"MA\", \"TS\", \"GM\"], \"currentGoal\": \"Some task for front-end\", 'workload': 75},\r\n                    ];\r\n    const [loading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [departments, setDepartments] = useState(fakeData);\r\n\r\n    const handleChangePage = (dataKey) =>{\r\n        setPage(dataKey)\r\n    }\r\n\r\n    const getData = (items) => {\r\n        const start = 10*page - 10;\r\n        const end = 10*page - 1;\r\n        let newItems = items.filter((item, i) => {return i >= start && i <= end});\r\n        return newItems\r\n    }\r\n\r\n\r\n    return (\r\n       <Container className=\"container\">\r\n            <FlexboxGrid justify=\"space-between\" align=\"middle\">\r\n                <FlexboxGrid.Item colspan={18}>\r\n                    <FlexboxGrid justify=\"start\"  align=\"middle\">\r\n                        <h3>Departments</h3>\r\n                        <div className=\"search\">\r\n                            <InputGroup size=\"md\">\r\n                                <Input />\r\n                                <InputGroup.Button>\r\n                                    <Icon icon=\"search\" />\r\n                                </InputGroup.Button>\r\n                            </InputGroup>\r\n                        </div>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n                <FlexboxGrid.Item colspan={6}>\r\n                    <FlexboxGrid justify=\"end\">\r\n                        <Button className=\"button-margin-right button-shadow\" color=\"orange\">Table View</Button>\r\n                        <Button className=\"button-shadow\" color=\"white\">Card View</Button>\r\n                    </FlexboxGrid>\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n            <div className=\"card\">\r\n                <Table autoHeight affixHeader affixHorizontalScrollbar data={getData(departments)}>\r\n                    <Table.Column width={240} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Department</Table.HeaderCell>\r\n                        <Table.Cell dataKey=\"departmentName\" />\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={240} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Members</Table.HeaderCell>\r\n                        <MembersCell dataKey=\"members\"/>\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={360} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Current Goal</Table.HeaderCell>\r\n                        <Table.Cell dataKey=\"currentGoal\" />\r\n                    </Table.Column>\r\n\r\n                    <Table.Column width={360} align=\"start\" resizable>\r\n                        <Table.HeaderCell>Workload</Table.HeaderCell>\r\n                        <ProgressCell dataKey=\"workload\"/>\r\n                    </Table.Column>\r\n                    \r\n                </Table>\r\n                <Table.Pagination\r\n                    activePage={page}\r\n                    displayLength={10}\r\n                    total={departments.length}\r\n                    onChangePage={handleChangePage}\r\n                />\r\n            </div>\r\n            <FlexboxGrid justify=\"end\" align=\"top\">\r\n                <Button className=\"button-margin-top button-shadow\" color=\"orange\">Add New Department</Button>\r\n            </FlexboxGrid>\r\n            \r\n        </Container>\r\n    )\r\n}\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\settings\\pages\\Settings.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\co-workers\\pages\\CoWorkers.js",["136","137"],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\Header.js",["138"],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\SideNav.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\RegisterTwo.js",["139"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport { Container, Col, Input, Button, SelectPicker, Divider } from 'rsuite';\r\nimport { AuthContext } from '../../shared/context/authContext';\r\nimport WidgetBuilderSvg from '../../shared/svgs/WidgetBuilderSvg';\r\nimport JiraSvg from '../../shared/svgs/JiraSvg';\r\nimport MondaySvg from '../../shared/svgs/MondaySvg';\r\nimport './register.scss';\r\n\r\nconst Register = props =>  {\r\n    \r\n    const [jiraUsers, setJiraUsers] = useState([]);\r\n    const [selectedJiraAccount, setSelectedJiraAccount] = useState(null);\r\n    const [name, setName] = useState(null);\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext);\r\n    const loginClicked = () => {\r\n        history.push('/login');\r\n    }\r\n\r\n    const getAllJiraUsers = () => {\r\n        axios.get('/users/register-step-two/get-all-jira-users')\r\n            .then((coWorkers) => {\r\n               \r\n                //Filters out users that are not supposed to be in the list.\r\n                //This needs to be  done because Jira categorizes users and apps as the same thing. (Not sure why)\r\n                let filteredCoWorkers = coWorkers.data.filter(person => person.accountType === \"atlassian\");\r\n                console.log(filteredCoWorkers);\r\n                setJiraUsers(filteredCoWorkers);\r\n            })\r\n            .catch(err => console.log(err));\r\n    \r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(auth.currUser.email);\r\n        axios({\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data: {\r\n                email: auth.currUser.email,\r\n                jiraId: selectedJiraAccount,\r\n                name: name\r\n            },\r\n            withCredentials: true,\r\n            url: \"/users/register-step-two/link-jira-account\",\r\n            }).then((res) => {\r\n                console.log(res)\r\n                history.push('/')\r\n            });\r\n    }\r\n\r\n    const selectUser = (id, userData) => {\r\n        console.log(id);\r\n        setSelectedJiraAccount(id);\r\n        setName(userData.displayName);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllJiraUsers()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"register-container\">\r\n            <Container className=\"container content\">\r\n                <span className=\"center\">\r\n                    <WidgetBuilderSvg/>\r\n                </span>\r\n\r\n                <Col lg={6} className=\"center\">\r\n                    <div className=\"card card-register\">\r\n                        <h4>Connect to your task management application</h4>\r\n                        <div className=\"button-margin-top\">\r\n                            <JiraSvg/>\r\n                            <SelectPicker \r\n                                onSelect={selectUser}\r\n                                data={jiraUsers}  \r\n                                labelKey=\"displayName\"\r\n                                valueKey=\"accountId\"\r\n                                style={{ width: \"100%\" }} />\r\n                        </div>\r\n                         {/* \r\n                        <Divider>or</Divider>\r\n                        \r\n                        <div className=\"divider-margin-top\">   \r\n                            <MondaySvg/>\r\n                            <SelectPicker \r\n                                data={[{\r\n                                    \"label\": \"Jiangxi\",\r\n                                    \"value\": 31\r\n                                    }]}  \r\n                                style={{ width: \"100%\" }} />\r\n                        </div>\r\n                        */}\r\n                        <Divider>or</Divider>\r\n                        \r\n                        <div className=\"divider-margin-top\">\r\n                            <label for=\"firsname\">First Name</label>\r\n                            <Input name=\"firstname\" placeholder=\"First Name\" />\r\n                        </div>\r\n\r\n                        <div className=\"divider-margin-top\">\r\n                            <label for=\"lastname\">Last Name</label>\r\n                            <Input name=\"lastname\" placeholder=\"Last Name\" />\r\n                        </div>\r\n                    \r\n                        <Button \r\n                            onClick={onSubmit}\r\n                            className=\"submit-button button-margin-top bold button-shadow\" \r\n                            color=\"orange\">\r\n                            Link Jira Account\r\n                        </Button>\r\n                        <Button \r\n                            className=\"submit-button divider-margin-top bold button-shadow\" \r\n                            color=\"orange\"\r\n                            onClick={loginClicked}\r\n                            appearance=\"ghost\">\r\n                            Skip\r\n                        </Button>\r\n                    </div>\r\n                </Col>\r\n            </Container>\r\n\r\n            <footer className=\"footer\">\r\n                <p>Developed by Maria and Tomas 2021</p>\r\n                <p>All rights reserved by Maria and Tomas  2021</p>\r\n            </footer>\r\n        </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default Register;","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\context\\authContext.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\register\\pages\\Register.js",["140"],"import React, { useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Col, Input, Button } from 'rsuite';\r\nimport Axios from 'axios';\r\n\r\nimport WidgetBuilderSvg from '../../shared/svgs/WidgetBuilderSvg';\r\nimport './register.scss';\r\n\r\nconst Register = props =>  {\r\n\r\n    const history = useHistory();\r\n\r\n    const loginClicked = () => {\r\n        history.push('/login');\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        Axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data: {\r\n                email: event.target.email.value,\r\n                password: event.target.password.value,\r\n                jobTitle: event.target.jobTitle.value\r\n            },\r\n            withCredentials: true,\r\n            url: \"/users/register\",\r\n            }).then((res) => history.push('/login'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"register-container\">\r\n            <Container className=\"container content\">\r\n                <span className=\"center\">\r\n                    <WidgetBuilderSvg/>\r\n                </span>\r\n\r\n                <Col lg={6} className=\"center\">\r\n                    <div className=\"card\">\r\n                        <form onSubmit={onSubmit}>\r\n                            <h4>Welcome to the Widget Builder Registration</h4>\r\n                        \r\n                            <div className=\"button-margin-top\">\r\n                                <label for=\"email\">Email</label>\r\n                                <Input name=\"email\" placeholder=\"Email\" />\r\n                            </div>\r\n                            \r\n                            <div className=\"button-margin-top\">   \r\n                                <label for=\"password\">Password</label>\r\n                                <Input name=\"password\" placeholder=\"Password\" type=\"password\"/>\r\n                            </div>\r\n                            \r\n                            <div className=\"button-margin-top\">\r\n                                <label for=\"jobTitle\">Job Title (Optional)</label>\r\n                                <Input name=\"jobTitle\" placeholder=\"Job Title\" />\r\n                            </div>\r\n                        \r\n                            <Button \r\n                                className=\"submit-button button-margin-top bold button-shadow\" \r\n                                type=\"submit\"\r\n                                color=\"orange\">\r\n                                Sing up\r\n                            </Button>\r\n                            <Button \r\n                                className=\"submit-button button-margin-top bold button-shadow\" \r\n                                color=\"orange\" \r\n                                appearance=\"ghost\"\r\n                                onClick={loginClicked}>\r\n                                Log in\r\n                            </Button>\r\n                        </form>  \r\n                    </div>\r\n                </Col>\r\n            </Container>\r\n\r\n            <footer className=\"footer\">\r\n                <p>Developed by Maria and Tomas 2020</p>\r\n                <p>All rights reserved by Maria and Tomas 2020</p>\r\n            </footer>\r\n        </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default Register;","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\login\\pages\\Login.js",["141"],"import React, { useContext } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Col, Input, Button } from 'rsuite';\r\nimport Axios from 'axios';\r\n\r\nimport WidgetBuilderSvg from '../../shared/svgs/WidgetBuilderSvg';\r\nimport '../../register/pages/register.scss';\r\n\r\nconst Login = props =>  {\r\n    const history = useHistory();\r\n\r\n    const registerClicked = () => {\r\n        history.push('/register');\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        Axios({\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            data: {\r\n                email: event.target.email.value,\r\n                password: event.target.password.value\r\n            },\r\n            withCredentials: true,\r\n            url: \"/users/login\",\r\n            })\r\n            .then((res) => {\r\n                console.log(res);\r\n                history.push('/');\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"register-container\">\r\n            <Container className=\"container content\">\r\n                <span className=\"center\">\r\n                    <WidgetBuilderSvg/>\r\n                </span>\r\n\r\n                <Col lg={6} className=\"center\">\r\n                    <div className=\"card\">\r\n                        <form onSubmit={onSubmit}>\r\n                            <h4>Log in</h4>\r\n                            <div className=\"button-margin-top\">\r\n                                <label for=\"email\">Email</label>\r\n                                <Input name=\"email\" placeholder=\"Email\" />\r\n                            </div>\r\n                            \r\n                            <div className=\"button-margin-top\">   \r\n                                <label for=\"password\">Password</label>\r\n                                <Input name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n                            </div>\r\n                        \r\n                            <Button \r\n                                className=\"submit-button button-margin-top bold button-shadow\" \r\n                                type=\"submit\" \r\n                                color=\"orange\">\r\n                                Log in\r\n                            </Button>\r\n                            <Button \r\n                                className=\"submit-button divider-margin-top bold button-shadow\" \r\n                                onClick={registerClicked}\r\n                                color=\"orange\" \r\n                                appearance=\"ghost\">\r\n                                Sign up\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </Col>\r\n            </Container>\r\n\r\n            <footer className=\"footer\">\r\n                <p>Developed by Maria and Tomas 2020</p>\r\n                <p>All rights reserved by Maria and Tomas 2020</p>\r\n            </footer>\r\n        </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default Login;","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\MondaySvg.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\JiraSvg.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\svgs\\WidgetBuilderSvg.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingLarge.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingSmall.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\HeadingMedium.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Paragraph.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\Link.js",[],"D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\shared\\components\\popup\\Popup.js",["142"],"import React, { useState } from 'react';\r\nimport './Popup.scss';\r\n\r\nconst Popup = (props) => {\r\n    const [close, setClose] = useState(false);\r\n\r\n    const closePopup = () => {\r\n        setClose(true);\r\n        if(props.clearPopupState){\r\n            props.clearPopupState();\r\n        }\r\n    }\r\n\r\n    let popUp = close === true ? null : (\r\n        <div id=\"modal\" className=\"modal-container\">\r\n            <div className=\"modal-wrap modal-wrap-mobile\">\r\n                <div className=\"popup-container\">{props.children}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    // When the user clicks anywhere outside of the modal, close it\r\n    window.onclick = (event) => {\r\n        if (event.target.id == \"modal\") {\r\n            closePopup();\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            {popUp}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Popup;","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\dashboard\\pages\\EditDashboard.js",["143","144","145","146"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { useHistory, Redirect, Link } from \"react-router-dom\";\r\nimport { Button, Grid, Row, Col, FlexboxGrid, Container } from 'rsuite';\r\nimport Axios from 'axios';\r\n\r\nimport { AuthContext } from '../../shared/context/authContext';\r\n\r\nconst EditDashboard = () => {\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext);\r\n    \r\n    const [widgets, setWidgets] = useState(null);\r\n    const [selectedWidget, setSelectedWidget] = useState(null);\r\n    const [selectedWidgetObj, setSelectedWidgetObj] = useState(null);\r\n    const [active, setActive] = useState(false);\r\n    const [dashboardWidgets, setDashboardWidgets] = useState(null);\r\n\r\n    // GET available widgets\r\n    const getWidgets = () => {\r\n        Axios({\r\n        method: \"GET\",\r\n        withCredentials: true,\r\n        url: \"/widgets/\",\r\n        })\r\n        .then((widgets) => {\r\n            setWidgets(widgets.data);\r\n        })\r\n        .catch(err => { throw err });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getWidgets();\r\n    },[]);\r\n\r\n    // onClick => Widget Selected\r\n    const widgetSelected = (widget) => {\r\n        setSelectedWidgetObj(widget);\r\n        \r\n        if (active){\r\n            document.getElementById(active).classList.remove('orange-border');\r\n        }\r\n        \r\n        setActive(widget._id);\r\n        document.getElementById(widget._id).classList.add('orange-border');\r\n        \r\n        if (widget) {\r\n            setSelectedWidget (\r\n                <Row gutter={16}>\r\n                    <Col lg={12}>\r\n                        <div className=\"card orange-border\">\r\n                            <h3>{widget.name}</h3>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n    }\r\n\r\n    // PUT  - Add widget to MyWidgetsDashboard\r\n    const addWidget = () => {\r\n        Axios({\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            data: {\r\n                myDashboardWidgetId: auth.currUser.myDashboardWidgets,\r\n                selectedWidgetObj\r\n            },\r\n            withCredentials: true,\r\n            url: \"/widgets/update-myDashboardWidget\",\r\n        })\r\n        .then((res) => {\r\n            console.log(res);\r\n        })\r\n        .catch(err => { throw err });\r\n    }\r\n\r\n    // GET - Get current users dashboard widgets\r\n    const getMyDashboardWidgets = () => {\r\n        Axios({\r\n            method: \"GET\",\r\n            withCredentials: true,\r\n            url: `/widgets/my-dashboard-widgets/${auth.currUser.myDashboardWidgets}`\r\n        })\r\n        .then((myDashboardWidgets) => {\r\n            let currDashboard = myDashboardWidgets.data.filter(dashboardWidget => dashboardWidget._id === auth.currUser.myDashboardWidgets);\r\n            setDashboardWidgets(currDashboard[0].dashboardWidgets);\r\n        })\r\n        .catch(err => { throw err });\r\n    }\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <Container className=\"container\">\r\n                <FlexboxGrid justify=\"space-between\" align=\"top\">\r\n                    <FlexboxGrid.Item colspan={18}>\r\n                        <h3>Edit Dashboard</h3>\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item colspan={6} >\r\n                        <FlexboxGrid justify=\"end\">\r\n                            <Link to=\"/\">\r\n                                <Button className=\"button-shadow\" color=\"orange\" appearance=\"ghost\">Finish Editing</Button>\r\n                            </Link>\r\n                            \r\n                        </FlexboxGrid>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n                <div>\r\n                    <Grid fluid>\r\n                        <Row gutter={16}>\r\n                            <Col lg={12}>\r\n                                <div className=\"card\">\r\n                                    <h1>Widget Card</h1>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        {selectedWidget}\r\n                    </Grid>\r\n                </div>\r\n            </Container>\r\n\r\n            <div className=\"widget-builder-side-bar\">\r\n                <h4>Available Widgets</h4>\r\n                {\r\n                    widgets !== null ? widgets.map((widget, index) => {\r\n\r\n                        return (\r\n                            <div onClick={() => widgetSelected(widget)} id={widget._id} className=\"gray-card button-shadow\">\r\n                                <h6>{widget.name}</h6>\r\n                                <p>{widget.description}</p>\r\n                            </div>\r\n                        )\r\n                    }) : null\r\n                }\r\n                <Button \r\n                    color=\"orange\" \r\n                    className=\"button-shadow full-width button-margin-top\"\r\n                    onClick={() => addWidget()}>Add Widget</Button>\r\n                <Link to=\"/\">\r\n                    <Button className=\"button-shadow full-width button-margin-top\" color=\"orange\" appearance=\"ghost\">Finish Editing</Button>\r\n                </Link>\r\n                 {/*<Button \r\n                    color=\"orange\" \r\n                    className=\"button-shadow full-width button-margin-top\"\r\n                    onClick={() => getMyDashboardWidgets()}>Get My Dashboard Widgets</Button>\r\n                 */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditDashboard;\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\ProgressBar.js",["147","148"],"import React, { useState } from 'react'\r\nimport { Progress } from 'rsuite'\r\n\r\nexport default function ProgressBar(props) {\r\n\r\n    const [percent, setPercent] = useState('50');\r\n\r\n    return (\r\n        <div>\r\n            {  \r\n            props.apiKey === null ?\r\n            <div>\r\n                \r\n                <input type=\"text\" value={props.content} id={props.identifier} onBlur={props.removeFocus} onChange={props.handleElementText} onClick={props.selectElement} className=\"width-100 hide-input-box text-center\" placeholder=\"Enter value from 1 to 100\" />\r\n                <Progress.Line percent={props.content} className=\"width-100 hide-input-box\"/>\r\n            </div>\r\n            :\r\n            <Progress.Line strokeColor=\"primary\" percent={props.apiKey} id={props.identifier} onBlur={props.removeFocus} onChange={props.handleElementText} onClick={props.selectElement} className=\"width-100 hide-input-box\"/>\r\n            }  \r\n        </div>\r\n    )\r\n}\r\n","D:\\Main school folder\\BA Project\\Code\\Widget-Builder-development\\client\\src\\widget-builder\\components\\ProgressCircle.js",["149","150"],"import React, { useState } from 'react'\r\nimport { Progress } from 'rsuite'\r\n\r\nexport default function ProgressCircle(props) {\r\n\r\n    const [percent, setPercent] = useState('50');\r\n\r\n    const handleInput = (e) => {\r\n        props.handleElementText(e)\r\n        setPercent(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {  \r\n            props.apiKey === null ?\r\n            <div>\r\n                <input type=\"text\" value={props.content} id={props.identifier} onBlur={props.removeFocus} onChange={props.handleElementText} onClick={props.selectElement} className=\"width-100 hide-input-box text-center\" placeholder=\"Enter value from 1 to 100\" />\r\n                <Progress.Circle percent={props.content}  className=\"circle-max hide-input-box\"/>\r\n            </div>\r\n            :\r\n            <div>\r\n                <input type=\"text\" id={props.identifier} onBlur={props.removeFocus} onChange={props.handleElementText} onClick={props.selectElement} className=\"width-100 hide-input-box text-center hidden\" placeholder=\"Enter value from 1 to 100\" />\r\n                <Progress.Circle strokeColor=\"primary\" percent={props.apiKey} id={props.identifier} onBlur={props.removeFocus} onChange={props.handleElementText} onClick={props.selectElement} className=\"circle-max hide-input-box\"/>\r\n            </div>\r\n            }  \r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":1,"column":40,"nodeType":"157","messageId":"158","endLine":1,"endColumn":49},{"ruleId":"155","severity":1,"message":"159","line":2,"column":22,"nodeType":"157","messageId":"158","endLine":2,"endColumn":30},{"ruleId":"155","severity":1,"message":"160","line":7,"column":10,"nodeType":"157","messageId":"158","endLine":7,"endColumn":20},{"ruleId":"155","severity":1,"message":"161","line":18,"column":11,"nodeType":"157","messageId":"158","endLine":18,"endColumn":23},{"ruleId":"155","severity":1,"message":"162","line":80,"column":33,"nodeType":"157","messageId":"158","endLine":80,"endColumn":37},{"ruleId":"163","severity":1,"message":"164","line":105,"column":8,"nodeType":"165","endLine":105,"endColumn":10,"suggestions":"166"},{"ruleId":"155","severity":1,"message":"167","line":27,"column":31,"nodeType":"157","messageId":"158","endLine":27,"endColumn":51},{"ruleId":"155","severity":1,"message":"168","line":36,"column":12,"nodeType":"157","messageId":"158","endLine":36,"endColumn":18},{"ruleId":"155","severity":1,"message":"169","line":36,"column":20,"nodeType":"157","messageId":"158","endLine":36,"endColumn":29},{"ruleId":"155","severity":1,"message":"170","line":81,"column":11,"nodeType":"157","messageId":"158","endLine":81,"endColumn":22},{"ruleId":"163","severity":1,"message":"171","line":103,"column":8,"nodeType":"165","endLine":103,"endColumn":17,"suggestions":"172"},{"ruleId":"155","severity":1,"message":"173","line":123,"column":17,"nodeType":"157","messageId":"158","endLine":123,"endColumn":25},{"ruleId":"155","severity":1,"message":"174","line":2,"column":40,"nodeType":"157","messageId":"158","endLine":2,"endColumn":43},{"ruleId":"155","severity":1,"message":"175","line":48,"column":12,"nodeType":"157","messageId":"158","endLine":48,"endColumn":19},{"ruleId":"155","severity":1,"message":"176","line":48,"column":21,"nodeType":"157","messageId":"158","endLine":48,"endColumn":31},{"ruleId":"155","severity":1,"message":"177","line":50,"column":25,"nodeType":"157","messageId":"158","endLine":50,"endColumn":39},{"ruleId":"155","severity":1,"message":"178","line":3,"column":89,"nodeType":"157","messageId":"158","endLine":3,"endColumn":95},{"ruleId":"163","severity":1,"message":"179","line":117,"column":7,"nodeType":"165","endLine":117,"endColumn":9,"suggestions":"180"},{"ruleId":"163","severity":1,"message":"181","line":39,"column":8,"nodeType":"165","endLine":39,"endColumn":14,"suggestions":"182"},{"ruleId":"155","severity":1,"message":"183","line":8,"column":8,"nodeType":"157","messageId":"158","endLine":8,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":1,"column":17,"nodeType":"157","messageId":"158","endLine":1,"endColumn":26},{"ruleId":"155","severity":1,"message":"184","line":1,"column":17,"nodeType":"157","messageId":"158","endLine":1,"endColumn":27},{"ruleId":"185","severity":1,"message":"186","line":24,"column":29,"nodeType":"187","messageId":"188","endLine":24,"endColumn":31},{"ruleId":"155","severity":1,"message":"159","line":2,"column":22,"nodeType":"157","messageId":"158","endLine":2,"endColumn":30},{"ruleId":"155","severity":1,"message":"189","line":9,"column":11,"nodeType":"157","messageId":"158","endLine":9,"endColumn":18},{"ruleId":"155","severity":1,"message":"190","line":16,"column":12,"nodeType":"157","messageId":"158","endLine":16,"endColumn":28},{"ruleId":"155","severity":1,"message":"191","line":80,"column":11,"nodeType":"157","messageId":"158","endLine":80,"endColumn":32},{"ruleId":"155","severity":1,"message":"192","line":6,"column":12,"nodeType":"157","messageId":"158","endLine":6,"endColumn":19},{"ruleId":"155","severity":1,"message":"193","line":6,"column":21,"nodeType":"157","messageId":"158","endLine":6,"endColumn":31},{"ruleId":"155","severity":1,"message":"192","line":6,"column":12,"nodeType":"157","messageId":"158","endLine":6,"endColumn":19},{"ruleId":"155","severity":1,"message":"194","line":8,"column":11,"nodeType":"157","messageId":"158","endLine":8,"endColumn":22},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'disconnect' is defined but never used.","'RenderWidget' is assigned a value but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWidgets'. Either include it or remove the dependency array.","ArrayExpression",["197"],"'setAvailableElements' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'removeFocus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lastFocus'. Either include it or remove the dependency array.",["198"],"'elements' is assigned a value but never used.","'Tag' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setDepartments' is assigned a value but never used.","'Loader' is defined but never used.","React Hook useEffect has a missing dependency: 'getCoWorkers'. Either include it or remove the dependency array.",["199"],"React Hook useEffect has a missing dependency: 'getNotifications'. Either include it or remove the dependency array.",["200"],"'MondaySvg' is defined but never used.","'useContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'history' is assigned a value but never used.","'dashboardWidgets' is assigned a value but never used.","'getMyDashboardWidgets' is assigned a value but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","'handleInput' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [getWidgets]",{"range":"209","text":"210"},"Update the dependencies array to be: [counter, lastFocus]",{"range":"211","text":"212"},"Update the dependencies array to be: [getCoWorkers]",{"range":"213","text":"214"},"Update the dependencies array to be: [auth, getNotifications]",{"range":"215","text":"216"},[4127,4129],"[getWidgets]",[4130,4139],"[counter, lastFocus]",[4847,4849],"[getCoWorkers]",[1334,1340],"[auth, getNotifications]"]